plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'com.adarshr.test-logger' version '3.2.0'
    id 'jacoco'
}

group = 'edu.stanford.slac'
version = '1.0.0'
ext{
    ad_eed_baselib_version="0.1.47"
    ad_eed_base_mongodb_lib_version="0.1.20"
    javaSourceCompatibility = JavaVersion.VERSION_21
    javaTargetCompatibility = JavaVersion.VERSION_21
}

java {
    sourceCompatibility = javaSourceCompatibility
    targetCompatibility = javaTargetCompatibility
}

springBoot {
    buildInfo {
        {
            properties {
                additional = [
                        'ad-eed-baselib': "${project.ext.ad_eed_baselib_version}",
                        'ad-eed-base-mongodb':"${project.ext.ad_eed_base_mongodb_lib_version}"
                ]
            }
        }
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven {
        url = uri("https://maven.pkg.github.com/eed-web-application/slac-ad-eed-baselib")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("GH_USERNAME")
            password = project.findProperty("gpr.key") ?: System.getenv("GH_TOKEN")
        }
    }
    maven {
        url = uri("https://maven.pkg.github.com/eed-web-application/slac-ad-eed-base-mongodb-lib")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("GH_USERNAME")
            password = project.findProperty("gpr.key") ?: System.getenv("GH_TOKEN")
        }
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-test',
            'org.springframework.boot:spring-boot-starter-web',
            'org.springframework.boot:spring-boot-starter-security',
            'org.springframework.boot:spring-boot-starter-validation',
            'org.springframework.boot:spring-boot-starter-actuator',
            'org.springframework.boot:spring-boot-starter-data-ldap',
            'org.springframework.boot:spring-boot-starter-validation',
            'com.unboundid:unboundid-ldapsdk:6.0.8',
            'io.micrometer:micrometer-registry-prometheus',
            'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2',
            'org.springdoc:springdoc-openapi-starter-webflux-ui:2.0.2',
            'io.swagger.core.v3:swagger-annotations:2.2.8',
            'org.mapstruct:mapstruct:1.5.3.Final'

    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5' // or 'io.jsonwebtoken:jjwt-gson:0.12.5' for gson
    implementation 'org.bouncycastle:bcprov-jdk15on:1.70'
    implementation 'org.eclipse.jgit:org.eclipse.jgit:6.9.0.202403050737-r'

    // github api
    implementation'org.kohsuke:github-api:1.321'

    // kubernetes api
//    implementation 'io.kubernetes:client-java:20.0.1'
    implementation 'io.fabric8:kubernetes-client:6.13.0'
    //eed library
    implementation "edu.stanford.slac:slac-ad-eed-baselib:$project.ext.ad_eed_baselib_version",
            "edu.stanford.slac:slac-ad-eed-base-mongodb-lib:$project.ext.ad_eed_base_mongodb_lib_version"
    // MongoDB
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    // mongock
    implementation 'io.mongock:mongock-bom:5.3.1',
            'io.mongock:mongock-springboot-v3:5.3.1',
            'io.mongock:mongodb-springdata-v4-driver:5.3.1'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.awaitility:awaitility:4.0.3'
    testImplementation 'io.fabric8:kube-api-test:6.13.0'
}

sourceSets {
    getByName("main") {
        java {
            srcDir("$buildDir/generated/src/main/java")
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

jacoco {
    reportsDirectory = layout.buildDirectory.dir('coverage')
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
    exclude '**/cis_api/**'
    // Configure test logging
    testLogging {
        events 'FAILED',
                'SKIPPED',
                'STANDARD_ERROR',
                'STANDARD_OUT'

        showCauses true
        showExceptions true
        showStackTraces true
        showStandardStreams true
    }

    // Customize the logging for test results
    afterTest { descriptor, result ->
        if (result.resultType != TestResult.ResultType.SUCCESS) {
            logger.lifecycle("Test: ${descriptor.name} - Result: ${result.resultType}")
            if (result.exception != null) {
                logger.error("Test exception: ", result.exception)
            }
            // Log standard output and error only for failed tests
            def standardOutput = descriptor.testClass.testOutput.getStandardOutput()
            def standardError = descriptor.testClass.testOutput.getStandardError()
            if (standardOutput) {
                logger.lifecycle("Standard Output: \n${standardOutput}")
            }
            if (standardError) {
                logger.lifecycle("Standard Error: \n${standardError}")
            }
        }
    }
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        csv.required = true
        html.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/dto/*', '**/cis_api/**']) // Adjust the pattern to match your DTOs
        }))
    }
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/dto/*','**/cis_api/**']) // Adjust the pattern to match your DTOs
        }))
    }
}

testlogger {
    theme 'standard'
    showExceptions true
    showStackTraces true
    showFullStackTraces false
    showCauses true
    slowThreshold 2000
    showSummary true
    showSimpleNames false
    showPassed true
    showSkipped true
    showFailed true
    showOnlySlow false
    showStandardStreams false
    showPassedStandardStreams true
    showSkippedStandardStreams true
    showFailedStandardStreams true
    logLevel 'lifecycle'
}

assemble.doLast {
    println "built app version: ${project.version}"
}